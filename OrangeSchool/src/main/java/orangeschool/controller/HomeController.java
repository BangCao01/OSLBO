package orangeschool.controller;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import java.security.Principal;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.User;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;

import orangeschool.model.Admin;
import orangeschool.form.*;
import orangeschool.repository.AdminRepository;
import orangeschool.WebUtil;
import orangeschool.service.AdminService;
import orangeschool.service.SecurityService;
import orangeschool.validator.AdminValidator;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/home") // This
public class HomeController extends BaseController{
	@Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
	private AdminRepository userRepository;
	
	@Autowired
    private AdminService userService;

    @Autowired
    private SecurityService securityService;

    @Autowired
    private AdminValidator userValidator;
	
	
    @RequestMapping(value = { "" }, method = RequestMethod.GET)
    public String index(Model model) {
 
    	model.addAttribute("message", message);
        model.addAttribute("persons", userRepository.findAll());
        model.addAttribute("menucode", this.menucode);
        System.out.print("menucode :" + this.menucode);
        return "home/index";
    }
    
    @RequestMapping(value = { "/index" }, method = RequestMethod.GET)
    public String homeIndex(Model model, Principal _principal) {
 
        model.addAttribute("message", message);
        model.addAttribute("persons", userRepository.findAll());
        model.addAttribute("menucode", this.menucode);
        System.out.print("menucode :" + this.menucode);
        User loginedUser = (User) ((Authentication) _principal).getPrincipal();
        this.setAccessCode(model, _principal);
        return "home/index";
    }
    
    
    
    @RequestMapping(value = { "/404" }, method = RequestMethod.GET)
    public String forbitden(Model model, Principal _principal) {
 
        
        return "forbidden";
    }
    
    
    @RequestMapping(value = { "/signin" }, method = RequestMethod.GET)
	public String showSignInPage(Model model) {
	 
	        SignInForm theForm = new SignInForm();
	        model.addAttribute("signInForm", theForm);
	 
	        return "home/signin";
	}
    @RequestMapping(value = { "/signin" }, method = RequestMethod.POST)
    public String saveSignInForm(Model model, //
            @ModelAttribute("signInForm") SignInForm signInForm, BindingResult bindingResult) {
 
    	
    	userValidator.validateSignInForm(signInForm, bindingResult);

        if (bindingResult.hasErrors())
        {
        	model.addAttribute("errorMessage", errorMessage);
	        model.addAttribute("signInForm", signInForm);
	        return "home/signin";
        }
        
        
        return "/home/index";
        
    }
    
	@RequestMapping(value = { "/signup" }, method = RequestMethod.GET)
	public String showSignUpPage(Model model) {
	 
	        SignUpForm theForm = new SignUpForm();
	        model.addAttribute("signUpForm", theForm);
	 
	        return "home/signup";
	}
	
	
	
	 @RequestMapping(value = { "/signup" }, method = RequestMethod.POST)
	    public String saveSignUpForm(Model model, //
	            @ModelAttribute("signupForm") SignUpForm signupForm, BindingResult bindingResult) {
	 
		    userValidator.validate(signupForm, bindingResult);

	        if (bindingResult.hasErrors()) {
	        	model.addAttribute("errorMessage", errorMessage);
	        	//SignUpForm theForm = new SignUpForm();
		        model.addAttribute("signUpForm", signupForm);
		        return "home/signup";
	        }

	        String username = signupForm.getUsername();
	        String password = signupForm.getPassword();
	        Admin n = new Admin();
    		n.setUsername(username);
    		n.setPassword(password);
    		n.setPermission(1);
    		
	        userService.save(n);

	        securityService.autoLogin(signupForm.getUsername(), signupForm.getConfirmPassword());
		 
	        return "redirect:/home/index";
	        

	    }
	
	 @RequestMapping(value = "/admininfo", method = RequestMethod.GET)
	    public String userInfo(Model model, Principal principal) {
	 
	        String userName = principal.getName();
	 
	        System.out.println("User Name: " + userName);
	 
	        User loginedAdminUser = (User) ((Authentication) principal).getPrincipal();
	 
	        String userInfo = WebUtil.toString(loginedAdminUser);
	        model.addAttribute("adminInfo", userInfo);
	 
	        return "home/admininfo";
	    }
	 
	 @RequestMapping(value = "/logout", method = RequestMethod.GET)
	    public String logoutSuccessfulPage(Model model,HttpServletRequest request, 
	            HttpServletResponse response) {
	        model.addAttribute("title", "Logout");
	        
	        try {
		        HttpSession session = request.getSession(false);
		        if (session != null) {

		            session.invalidate();
		        }
				
		        SecurityContextHolder.clearContext();
		        return "redirect:/home/signin";

		    } catch (Exception e) {
		        //logger.log(LogLevel.INFO, "Problem logging out.");
				System.out.println("inside catch\n\n");

		    	return "ERROR"+e.getMessage();
		    }
	        
	        
	        
	        
	    }
	 
	 @RequestMapping(value = "/403", method = RequestMethod.GET)
	    public String accessDenied(Model model, Principal principal) {
	 
	        if (principal != null) {
	            User loginedUser = (User) ((Authentication) principal).getPrincipal();
	 
	            String userInfo = WebUtil.toString(loginedUser);
	 
	            model.addAttribute("userInfo", userInfo);
	 
	            String message = "Hi " + principal.getName() //
	                    + "<br> You do not have permission to access this page!";
	            model.addAttribute("message", message);
	 
	        }
	 
	        return "403page";
	    }
	


}
